# -*- coding: utf-8 -*-
"""Final FRDA Project Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urFsgQkHaonmo--iWFBJByRr0YuEC6yz
"""

import numpy as np
import pandas as pd
import streamlit as st

# --- Page management ---
if "page" not in st.session_state:
    st.session_state["page"] = "home"

# --- Home Page (File Upload + EDA) ---
if st.session_state["page"] == "home":
    st.title("ðŸ“Š Fraud Detection Data Explorer")

    # Sidebar file uploader
    st.sidebar.header("Upload your file")
    uploaded_file = st.sidebar.file_uploader("Choose a CSV or Excel file", type=["csv", "xlsx", "xls"])

    if uploaded_file is not None:
        # Detect file type and read accordingly
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file, engine="python")
            st.success("CSV file uploaded successfully âœ…")
        else:
            df = pd.read_excel(uploaded_file)
            st.success("Excel file uploaded successfully âœ…")

        # Show Head
        st.subheader("Dataset Preview (first 5 rows)")
        st.dataframe(df.head())

        # Shape
        st.subheader("Dataset Shape")
        st.write(f"Rows: {df.shape[0]}, Columns: {df.shape[1]}")

        # Info
        import io
        st.subheader("Dataset Info")
        buffer = io.StringIO()       # create a string buffer
        df.info(buf=buffer)          # write info to buffer
        info_str = buffer.getvalue() # get string from buffer
        st.text(info_str)


        drop_cols = ['Transaction_ID', 'FastagID', 'Vehicle_Plate_Number']
        df = df.drop(columns=[col for col in drop_cols if col in df.columns], axis=1)

        st.write("Updated Dataset Preview (after dropping columns):")
        st.dataframe(df.head())

        # Missing values
        st.subheader("Missing Values in Each Column")
        st.write(df.isnull().sum())

        # Dtypes
        st.subheader("Column Data Types")
        st.write(df.dtypes)

        # Duplicate rows
        duplicate_rows = df.duplicated().sum()
        st.subheader("Duplicate Rows")
        st.write(f"Number of duplicate rows: {duplicate_rows}")

    else:
        st.info("Please upload a CSV or Excel file from the sidebar to get started.")


st.title("ðŸ“Š Numerical Data Exploration & Outlier Treatment")


numerical_cols = df.select_dtypes(include='number').columns.tolist()
if 'isFraud' in numerical_cols:
    numerical_cols.remove('isFraud')

# --- Numerical Statistics (Original) ---
st.subheader("Numerical Column Statistics (Original)")
if numerical_cols:
    for col in numerical_cols:
        st.write(f"Statistics for {col}")
        
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        median = df[col].median()
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        stats_df = pd.DataFrame({
            "Metric": ["Q1 (25th Percentile)", "Median", "Q3 (75th Percentile)", "IQR", "Lower Bound", "Upper Bound"],
            "Value": [Q1, median, Q3, IQR, lower_bound, upper_bound]
        })
        
        st.dataframe(stats_df)
else:
    st.info("No numerical columns available for statistics.")

# --- Outlier Treatment ---
st.subheader("Outlier Treatment")
for col in ['Amount_paid', 'Vehicle_Speed']:
    if col in df.columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df[col] = np.where(df[col] < lower_bound, lower_bound, df[col])
        df[col] = np.where(df[col] > upper_bound, upper_bound, df[col])

# --- Numerical Statistics after Outlier Treatment ---
st.subheader("Numerical Column Statistics after Outlier Treatment")
if numerical_cols:
    for col in numerical_cols:
        st.write(f"Statistics for {col} (Updated)")
        
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        median = df[col].median()
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        stats_df = pd.DataFrame({
            "Metric": ["Q1 (25th Percentile)", "Median", "Q3 (75th Percentile)", "IQR", "Lower Bound", "Upper Bound"],
            "Value": [Q1, median, Q3, IQR, lower_bound, upper_bound]
        })
        
        st.dataframe(stats_df)
else:
    st.info("No numerical columns available for updated statistics.")
